apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: $EnvName$-pos-amazoncenter
  name: $EnvName$-pos-amazoncenter
spec:
  progressDeadlineSeconds: 600
  replicas: {{.REPLICE_NUM}}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: $EnvName$-pos-amazoncenter
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: $EnvName$-pos-amazoncenter
      {{ if .ARMS_ENABLE }}
        armsPilotAutoEnable: "on"
        armsPilotCreateAppName: $EnvName$-pos-amazoncenter
        armsSecAutoEnable: "on"
      {{ end }}
    spec:
    {{ if .MATCHEXPRESSIONS_KEY }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{.MATCHEXPRESSIONS_KEY}}
                operator: In
                values:
                - {{.MATCHEXPRESSIONS_VALUES}}
    {{ end }}
      containers:
      - env:
        - name: LANG
          value: zh_CN.UTF-8
        - name: JAVA_HOME
          value: /usr/lib/jvm/java-1.8.0-amazon-corretto
        - name: CATALINA_HOME
          value: /usr/local/tomcat
        - name: TZ
          value: Asia/Shanghai
        - name: JAVA_OPTS
          value: {{.JAVA_OPTION}}
        - name: APOLLO_ACCESS_KEY_SECRET
          value: {{.APOLLO_ACCESS_KEY_SECRET}}
        - name: apollo.bootstrap.namespaces
          value: application-pos,application,amazonCenter-public,earth-public
        envFrom:
        - configMapRef:
            name: {{.APOLLO_FILE}}
        image: acr.nhsoftcloud.com/cn-nhsoft/amazon-center:v0
        imagePullPolicy: IfNotPresent
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /amazonCenter/echo
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /amazonCenter/echo
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: amazon-center
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /amazonCenter/echo
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
          {{ if .CPU_LIMIT }}
            cpu: {{.CPU_LIMIT}}
          {{ end }}
            memory: {{.MEM_USAGE}}Mi
          requests:
          {{ if .CPU_REQUEST }}
            cpu: {{.CPU_REQUEST}}
          {{ end }}
            memory: {{.MEM_USAGE}}Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
{{ if .ECI_ENABLE }}
apiVersion: scheduling.alibabacloud.com/v1alpha1
kind: ResourcePolicy
metadata:
  name: rp-$EnvName$-pos-amazoncenter
spec:
  ignorePreviousPod: false
  ignoreTerminatingPod: true
  matchLabelKeys:
    - pod-template-hash
  preemptPolicy: AfterAllUnits
  selector:
    app: $EnvName$-pos-amazoncenter
  strategy: prefer
  units:
    - max: {{.REPLICE_NUM}}
      resource: ecs
    - resource: eci
  whenExceedMax: NeverEvict
--- 
{{ end }}
{{ if ne .HPA_MAX_REPLICA 0 }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hpa-$EnvName$-pos-amazoncenter
spec:
  maxReplicas: {{.HPA_MAX_REPLICA}}
  minReplicas: {{.REPLICE_NUM}}
  metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 80
          type: Utilization
      type: Resource
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: $EnvName$-pos-amazoncenter
--- 
{{ end }}
{{ if and (ne .HPA_MAX_REPLICA 0) ( .CRON_HPA_UP ) ( .CRON_HPA_DOWN ) }}
apiVersion: autoscaling.alibabacloud.com/v1beta1
kind: CronHorizontalPodAutoscaler
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: cronhpa-$EnvName$-pos-amazoncenter
spec:
   scaleTargetRef:
      apiVersion: autoscaling/v1
      kind: HorizontalPodAutoscaler
      name:  hpa-$EnvName$-pos-amazoncenter
   jobs:
   {{ range .CRON_HPA_UP }}
   - name: scale-up-{{ .name }}
     schedule: {{ .cron }}
     targetSize: {{ $.HPA_MAX_REPLICA }}
     runOnce: false
   {{ end }}
   {{ range .CRON_HPA_DOWN }}
   - name: scale-down-{{ .name }}
     schedule: {{ .cron }}
     targetSize: {{ $.REPLICE_NUM }}
     runOnce: false
   {{ end }}
{{ end }}
